An exception object is an instance of an exception class. It gets created and handed to the Java runtime 
when an exceptional event occurred that disrupted the normal flow of the application.

Difference between checked and unchecked exceptions
1) Checked Exception
The classes that extend Throwable class except RuntimeException and Error are known as checked exceptions 
e.g.IOException, SQLException etc. Checked exceptions are checked at compile-time.

2) Unchecked Exception
The classes that extend RuntimeException are known as unchecked exceptions 
e.g. ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException etc. 
Unchecked exceptions are not checked at compile-time rather they are checked at runtime.

3) Error
Error is irrecoverable e.g. OutOfMemoryError, VirtualMachineError, AssertionError

Lambda 
It provides a clear and concise way to represent one method interface using an expression.
It is very useful in collection library. It helps to iterate, filter and extract data from collection.
	0)
	 list.forEach(  
            (n)->System.out.println(n)  
        );  
	1)
	interface Sayable{  
		public String say();  
	} 
	-----------------------------
    Sayable s=()->{  
        return "I have nothing to say.";  
    };  
    System.out.println(s.say());  
	
	2 
	// using lambda to filter data  
    Stream<Product> filtered_data = list.stream().filter(p -> p.price > 20000);  
          
    // using lambda to iterate through collection  
    filtered_data.forEach(  
        product -> System.out.println(product.name+": "+product.price)  
    );  

Stream
Stream represents a sequence of objects from a source, which supports aggregate operations(filter, map, limit, reduce, find, match, and so on).
// Count empty strings
List<String> strings = Arrays.asList("abc", "", "bc", "efg", "abcd","", "jkl");
System.out.println("List: " +strings);

filtered = strings.stream().filter(string ->!string.isEmpty()).collect(Collectors.toList());
System.out.println("Filtered List: " + filtered);

random.ints().limit(10).sorted().forEach(System.out::println);

Foreach
normal
for (Map.Entry<String, Integer> entry : items.entrySet()) {
		System.out.println("Item : " + entry.getKey() + " Count : " + entry.getValue());
	}
foreach
items.forEach((k,v)->{
		System.out.println("Item : " + k + " Count : " + v);
		if("E".equals(k)){
			System.out.println("Hello E");
		}
	});

squaresList = numbers.stream().map( i ->i*i).distinct().collect(Collectors.toList());
System.out.println("Squares List: " + squaresList);
System.out.println("List: " +integers);



Static Binding (early binding)
If there is any private, final or static method in a class, there is static binding. 
The binding which can be resolved at compile time by compiler is known as static or early binding. 

Dynamic Binding (late binding)
Overriding is a perfect example of dynamic binding
Dynamic binding which can be resolved at runtime is known as dynamic binding.
If medthod in a sub class has the same name,same parameters or singnature and same return type as declared in the parent class, it is known as method overriding in java.	
If subclass provides the specific implementation of the method that has been provided by one of its parent class, it is known as method overriding.
1 ) static, private and fianl methods cannot be overriding
	

Singleton pattern that allows "only one instance of the class and provide a global access point to get the instance of the class".
Some basics rules required to implement a singleton class
1 ) Private constructor, to restrict instantiation of the class from other classes.
2 ) Private static variable of the same class, to ensure that only one instance of the class.
3 ) Public static method that returns the instance of the class, this is the global access point for outer world to get the instance of the singleton class.

String
1 ) String is immutable  ( once created can not be changed )object  . The object created as a String is stored in the  Constant String Pool  . 
2 ) Every immutable object in Java is thread safe ,that implies String is also thread safe . String can not be used by two threads simultaneously.
3 ) String  once assigned can not be changed.
Ex String  demo = " hello " ;
	// The above object is stored in constant string pool and its value can not be modified.
	demo="Bye" ;     //new "Bye" string is created in constant pool and referenced by the demo variable            
	// "hello" string still exists in string constant pool and its value is not overrided but we lost reference to the  "hello"string  

StringBuffer : 
1 ) StringBuffer is synchronized that is StringBuffer is thread safe
2 ) StringBuffer is mutable. that is it stores the object in heap and it can also be modified 
3 ) StringBuffer is low compare to StringBuilder. thread safe . 
Ex 
	StringBuffer demo1 = new StringBuffer("Hello") ;
	// The above object stored in heap and its value can be changed .
	demo1=new StringBuffer("Bye");
	// Above statement is right as it modifies the value which is allowed in the StringBuffer

StringBuilder
1 ) StringBuilder is not synchronized that is StringBuffer is thread safe
2 ) StringBuilder is mutable. that is it stores the object in heap and it can also be modified 
3 ) StringBuilder is fast as it is not thread safe . 
Ex
	StringBuilder demo2= new StringBuilder("Hello");
	// The above object too is stored in the heap and its value can be modified
	demo2=new StringBuilder("Bye"); 
	// Above statement is right as it modifies the value which is allowed in the StringBuilder
	
	
	
ArrayList 
Java ArrayList class uses a dynamic array for storing the elements. It inherits AbstractList class and implements List interface.
The important points about Java ArrayList class are:
1 )	Java ArrayList class can contain duplicate elements.
2 )	Java ArrayList class maintains insertion order.
3 ) Java ArrayList class is non synchronized.
4 )	Java ArrayList allows random access because array works at the index basis.
5 )	In Java ArrayList class, manipulation is slow because a lot of shifting needs to be occurred if any element is removed from the array list.

	import java.util.ArrayList;

	public class ArrayListExample {

		public static void main(String[] args) {
			// size of ArrayList.
			int size = 5;
			// Declaring ArrayList with initial size 5 . default size 10.
			ArrayList<Integer> arrayList = new ArrayList<>(size);
			for (int i = 1; i <= size; i++)
				arrayList.add(i);

			// Printing elements
			System.out.println(arrayList);

			// Remove element at index 3
			arrayList.remove(3);

			// Displaying ArrayList after deletion
			System.out.println(arrayList);

			// Printing elements one by one
			for (Integer integer : arrayList) {
				System.out.print(integer + " ");
			}

		}

	}
	output :
	[1, 2, 3, 4, 5]
	[1, 2, 3, 5]
	1 2 3 5 

	
LinkedList
Java LinkedList class uses doubly linked list to store the elements. It provides a linked-list data structure.
 It inherits the AbstractList class and implements List and Deque interfaces.
The important points about Java LinkedList are:
1 ) Java LinkedList class can contain duplicate elements.
2 ) Java LinkedList class maintains insertion order.
3 ) Java LinkedList class is non synchronized.
4 ) In Java LinkedList class, manipulation is fast because no shifting needs to be occurred.
5 )	Java LinkedList class can be used as list, stack or queue.

	import java.util.LinkedList;

	public class LinkedListExample {
		public static void main(String args[]) {
			LinkedList<String> linkedList = new LinkedList<>();
			linkedList.add("One");
			linkedList.add("Second");
			linkedList.add("Three");
			
			for(String data : linkedList) {
				System.out.println(data);
			}
		}

	}

	Output :

	One
	Second
	Three

	
Overriding

If medthod in a sub class has the same name,same parameters or singnature and same return type as declared in the parent class, it is known as method overriding in java.	
If subclass provides the specific implementation of the method that has been provided by one of its parent class, it is known as method overriding.

	1 ) static, private and fianl methods cannot be overriding
	2 ) Overriding and constructor We can not override constructor as parent and child class can never have constructor with same name(Constructor name must always be same as Class name).
	
	
	public class Overriding {
		public static class Parent {
			public void print() {
				System.out.println("From Parent");
			}
		}

		public static class Child extends Parent {
			@Override
			public void print() {
				System.out.println("From Child");
			}
		}

		public static void main(String args[]) {
			Parent obj = new Child();
			obj.print();
		}
	}
	
	Output : 
		
	From Child



Encapsulation
Encapsulation is the mechanism that binds together code and data it manipulates and keeps both safe from outside interference and misuse.

Inheritance
Inheritance is the process by which one object acquires the properties of another object.

Polymorphism
Polymorphism is the feature that allows one interface to be used for general class actions.

Transient
The transient modifier applies to variables only and it is not stored as part of its object’s Persistent state. Transient variables are not serialized.

Volatile
Volatile modifier applies to variables only and it tells the compiler that the variable modified by volatile can be changed unexpectedly by other parts of the program.

toString()
toString() is a Object class that returns the string representation of the object. 
If you print any object compiler invokes the Object class toString() method, So sub-classes overrides toString() for desire output.



Static Binding (early binding)
	The binding which can be resolved at compile time by compiler is known as static or early binding. 
If there is any private, final or static method in a class, there is static binding. 
	Because compiler knows that all such methods cannot be overridden and will always be accessed by object of local class

1)	overloaded methods using static, i.e., at compile time.
2)	Static binding uses Type (class in Java) information for binding.
	

	public class StaticBinding {
		public static class SuperClass {
			private void print() {
				System.out.println("print from super class");
			}
		}

		public static class SubClass extends SuperClass {
			public void print() {
				System.out.println("print from sub class");
			}
		}

		public static void main(String arg[]) {

			SuperClass first = new SuperClass();
			first.print();

			SuperClass second = new SubClass();
			second.print();

		}

	}
	
	Output:
	
	print from super class
	print from super class

	
Dynamic Binding (late binding)

	Dynamic binding which can be resolved at runtime is known as dynamic binding.
	Overriding is a perfect example of dynamic binding

1)	Overridden methods using dynamic binding, i.e., at run time.
2)	Dynamic binding uses object to resolve binding.
	
	
	public class DynamicBinding {
		public static class SuperClass {
			public void print() {
				System.out.println("print from super class");
			}
		}

		public static class SubClass extends SuperClass {
			@Override
			public void print() {
				System.out.println("print from sub class");
			}
		}

		public static void main(String arg[]) {

			SuperClass first = new SuperClass();
			first.print();

			SuperClass second = new SubClass();
			second.print();

		}

		
	}
	
	Output:
	
	print from super class
	print from sub class



